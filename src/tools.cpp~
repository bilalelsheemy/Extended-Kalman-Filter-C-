#include <iostream>
#include "tools.h"

using Eigen::VectorXd;
using Eigen::MatrixXd;
using std::vector;

Tools::Tools() {}

Tools::~Tools() {}

VectorXd CalculateRMSE(const vector<VectorXd> &estimations,
		const vector<VectorXd> &ground_truth){

	VectorXd rmse(4);
	rmse << 0,0,0,0;
    
    double px_sqrd_err; 
	double py_sqrd_err; 
	double vx_sqrd_err; 
	double vy_sqrd_err;
		
    // TODO: YOUR CODE HERE

	// check the validity of the following inputs:
	//  * the estimation vector size should not be zero
	//  * the estimation vector size should equal ground truth vector size
	// ... your code here

	//accumulate squared residuals
	for(int i=0; i < estimations.size(); i++){
        // ... your code here
        //cout<<px_sqrd_err + pow((estimations[i][0] - ground_truth[i][0]),2)<<endl;
        px_sqrd_err = px_sqrd_err + pow((estimations[i][0] - ground_truth[i][0]),2);
		py_sqrd_err = py_sqrd_err + pow((estimations[i][1] - ground_truth[i][1]),2);
		vx_sqrd_err = vx_sqrd_err + pow((estimations[i][2] - ground_truth[i][2]),2);
		vy_sqrd_err = vy_sqrd_err + pow((estimations[i][3] - ground_truth[i][3]),2);
	}

	//calculate the mean
	// ... your code here
    rmse <<  px_sqrd_err / estimations.size(), py_sqrd_err / estimations.size(), vx_sqrd_err / estimations.size(), vy_sqrd_err / estimations.size();

    
	//calculate the squared root
	// ... your code here
	for(int n=0; n < rmse.size(); n++){
	
	    rmse[n] = sqrt(rmse[n]);
	    
	}
    
	//return the result
	return rmse;
}

MatrixXd CalculateJacobian(const VectorXd& x_state) {

	MatrixXd Hj(3,4);
	//recover state parameters
	float px = x_state(0);
	float py = x_state(1);
	float vx = x_state(2);
	float vy = x_state(3);

	//TODO: YOUR CODE HERE 
    //Hj[0][0] = px/(sqrt(px*px+ py*py));
    //Hj[0][1] = py/(sqrt(px*px+ py*py));
    
    //Hj[1][0] = -py/(px*px+ py*py);
    //Hj[1][1] = px/(px*px+ py*py);
    
    //Hj[2][0] = py(vx*py - vy*px) / (pow(px*px+ py*py),1.5);
    //Hj[2][1] = px(vy*px - vx*py) / (pow(px*px+ py*py),1.5);
    
    //Hj[2][2] = Hj[0][0];
    //Hj[2][3] = Hj[0][1];
    
    
	//check division by zero
	if(((pow((px*px+ py*py),1.5)) == 0) || ((sqrt(px*px+ py*py)) == 0))
	{
	    cout<<"Devision by zero while calculating Jacobian eleements"<<endl;
	    return Hj;
	}
	
	else
	{
	    //compute the Jacobian matrix
        Hj << px/(sqrt(px*px+ py*py)), py/(sqrt(px*px+ py*py)), 0, 0,
        -py/(px*px+ py*py), px/(px*px+ py*py), 0, 0,
        py*(vx*py - vy*px) / (pow((px*px+ py*py),1.5)), px*(vy*px - vx*py) / (pow((px*px+ py*py),1.5)), px/(sqrt(px*px+ py*py)), py/(sqrt(px*px+ py*py));
    
    
	    return Hj;
	}
	
}
